
# @COPYRIGHT@
# Licensed under MIT license (LICENSE.txt).

Import('env')

from SCons.Util import CLVar, NodeList
import os

sources =  [
    'cl/command_queue.cpp',
    'cl/context.cpp',
    'cl/context_properties.cpp',
    'cl/device.cpp',
    'cl/device_partition.cpp',
    'cl/device_partition_properties.cpp',
    'cl/devices.cpp',
    'cl/event.cpp',
    'cl/events.cpp',
    'cl/functions.cpp',
    'cl/kernel.cpp',
    'cl/kernel_exec.cpp',
    'cl/mem.cpp',
    'cl/mem_fcn.cpp',
    'cl/platform.cpp',
    'cl/platform_layer.cpp',
    'cl/platforms.cpp',
    'cl/program.cpp',
    'cl/program_generator.cpp',
    'cl/program_lazy_generator.cpp',
    'cl/program_observer.cpp',
]

headers = [
    'cl/command_queue.hpp',
    'cl/command_queue_fwd.hpp',
    'cl/context.hpp',
    'cl/context_fwd.hpp',
    'cl/context_properties.hpp',
    'cl/context_property.hpp',
    'cl/device.hpp',
    'cl/device_fwd.hpp',
    'cl/device_partition.hpp',
    'cl/device_partition_properties.hpp',
    'cl/device_partition_property.hpp',
    'cl/devices.hpp',
    'cl/event.hpp',
    'cl/event_fwd.hpp',
    'cl/events.hpp',
    'cl/clobj.hpp',
    'cl/clobj_fcn.hpp',
    'cl/clobj_impl.hpp',
    'cl/functions.hpp',
    'cl/kernel.hpp',
    'cl/kernel_exec.hpp',
    'cl/kernel_fwd.hpp',
    'cl/kernels.hpp',
    'cl/mem.hpp',
    'cl/mem_fcn.hpp',
    'cl/mem_fwd.hpp',
    'cl/platform.hpp',
    'cl/platform_fwd.hpp',
    'cl/platform_layer.hpp',
    'cl/platforms.hpp',
    'cl/program.hpp',
    'cl/program_fwd.hpp',
    'cl/program_generator.hpp',
    'cl/program_lazy_generator.hpp',
    'cl/program_observer.hpp',
]

headers += [
    'cl.hpp'
]

env['CLXX_PACKAGES']['libclxx_cl'] = {
    'version' : env.subst('$CLXX_VERSION'),
    'libdeps' : CLVar('OpenCL clxx_info clxx_common')
}

objects = env.SharedObject(sources)

overrides = {
    'SHLIBVERSION'  : env['CLXX_PACKAGES']['libclxx_cl']['version'],
    'LIBS'          : env['CLXX_PACKAGES']['libclxx_cl']['libdeps']
}

# rlib - "real" libarary
rlib = env.SharedLibrary('../clxx_cl', objects + ['cl/real.cpp'], **overrides)

# tlib - library for testing (OpenCL functions replaced with mocks)
tlib = env.SharedLibrary('../clxx_cl_test', objects + ['cl/mock.cpp'], **overrides)
env.Ignore('../..', tlib)

ilib = env.InstallVersionedLib('${libdir}', rlib, **overrides)
env.Ignore("${INSTALL_SANDBOX}${libdir}", ilib)

iheaders = NodeList()
for header in headers:
    [head, tail] = os.path.split(header)
    idir = os.path.join(env.subst("${includedir}"), "clxx", head);
    iheader = env.Install(idir, header)
    env.Ignore(idir, iheader)
    iheaders += iheader

env.Alias('install-libclxx_cl-headers', iheaders)
env.Alias('install-libclxx_cl-lib', ilib)
env.Alias('install-libclxx_cl-dev', ['install-libclxx_cl-headers', 'install-libclxx_cl-lib' ])
env.Alias('install','install-libclxx_cl-dev')

# Local Variables:
# # tab-width:4
# # indent-tabs-mode:nil
# # End:
# vim: set syntax=scons expandtab tabstop=4 shiftwidth=4:
