
# @COPYRIGHT@
# Licensed under MIT license (LICENSE.txt).

Import(['env'])

from SCons.Util import CLVar

tests = [
    'command_queue.t.h',
    'context.t.h',
    'context_properties.t.h',
    'context_property.t.h',
    'device.t.h',
    'device_partition.t.h',
    'device_partition_properties.t.h',
    'device_partition_property.t.h',
    'devices.t.h',
    'event.t.h',
    'events.t.h',
    'functions/build_program.t.h',
    'functions/compile_program.t.h',
    'functions/create_buffer.t.h',
    'functions/create_command_queue.t.h',
    'functions/create_command_queue_with_properties.t.h',
    'functions/create_context.t.h',
    'functions/create_context_from_type.t.h',
    'functions/create_image.t.h',
    'functions/create_kernel.t.h',
    'functions/create_kernels_in_program.t.h',
    'functions/create_program_with_binary.t.h',
    'functions/create_program_with_built_in_kernels.t.h',
    'functions/create_program_with_source.t.h',
    'functions/create_sub_buffer.t.h',
    'functions/create_sub_devices.t.h',
    'functions/create_user_event.t.h',
    'functions/enqueue_copy_buffer.t.h',
    'functions/enqueue_copy_buffer_to_image.t.h',
    'functions/enqueue_copy_image.t.h',
    'functions/enqueue_copy_image_to_buffer.t.h',
    'functions/enqueue_map_buffer.t.h',
    'functions/enqueue_map_image.t.h',
    'functions/enqueue_migrate_mem_objects.t.h',
    'functions/enqueue_native_kernel.t.h',
    'functions/enqueue_ndrange_kernel.t.h',
    'functions/enqueue_read_buffer.t.h',
    'functions/enqueue_read_image.t.h',
    'functions/enqueue_unmap_mem_object.t.h',
    'functions/enqueue_write_buffer.t.h',
    'functions/enqueue_write_image.t.h',
    'functions/finish.t.h',
    'functions/flush.t.h',
    'functions/get_command_queue_info.t.h',
    'functions/get_context_info.t.h',
    'functions/get_device_ids.t.h',
    'functions/get_device_info.t.h',
    'functions/get_event_info.t.h',
    'functions/get_event_profiling_info.t.h',
    'functions/get_image_info.t.h',
    'functions/get_kernel_arg_info.t.h',
    'functions/get_kernel_info.t.h',
    'functions/get_kernel_work_group_info.t.h',
    'functions/get_mem_object_info.t.h',
    'functions/get_platform_ids.t.h',
    'functions/get_platform_info.t.h',
    'functions/get_program_build_info.t.h',
    'functions/get_program_info.t.h',
    'functions/get_supported_image_formats.t.h',
    'functions/link_program.t.h',
    'functions/release_command_queue.t.h',
    'functions/release_context.t.h',
    'functions/release_device.t.h',
    'functions/release_event.t.h',
    'functions/release_kernel.t.h',
    'functions/release_mem_object.t.h',
    'functions/release_program.t.h',
    'functions/retain_command_queue.t.h',
    'functions/retain_context.t.h',
    'functions/retain_device.t.h',
    'functions/retain_event.t.h',
    'functions/retain_kernel.t.h',
    'functions/retain_mem_object.t.h',
    'functions/retain_program.t.h',
    'functions/set_event_callback.t.h',
    'functions/set_kernel_arg.t.h',
    'functions/set_kernel_arg_svm_pointer.t.h',
    'functions/set_kernel_exec_info.t.h',
    'functions/set_user_event_status.t.h',
    'functions/unload_platform_compiler.t.h',
    'functions/wait_for_events.t.h',
    'clobj.t.h',
    'clobj_fcn.t.h',
    'kernel.t.h',
    'kernel_exec.t.h',
    'mem.t.h',
    'mem_fcn.t.h',
    'ndrange.t.h',
    'platform.t.h',
    'platform_layer.t.h',
    'platforms.t.h',
    'program.t.h',
]

env.CxxTest('../check-libclxx_cl', tests,
           LIBS = CLVar('clxx_cl_test OpenCL clxx_info'),
           CXXTEST_CPPPATH = ['..'],
           CXXTEST_LIBPATH = env.get('LIBPATH', CLVar()),
           CXXTEST_TARGET = 'check-libclxx_cl')

env.Alias('check', [ 'check-libclxx_cl' ])
env.AlwaysBuild('check-libclxx_cl')

# Local Variables:
# # tab-width:4
# # indent-tabs-mode:nil
# # End:
# vim: set syntax=scons expandtab tabstop=4 shiftwidth=4:
