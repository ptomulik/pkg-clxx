
# @COPYRIGHT@
# Licensed under MIT license (LICENSE.txt).

Import('conf')

import sys
import SCons.Util
from SConsGnu import CcChecks
from SConsGnu.Cc import CanonCC, CanonCXX

def HasCcWflag(conf, flag):
    d = conf.env['CC_HAS_FLAG']
    d[flag] = conf.CheckCCFlag(flag, CCFLAGS=['-Werror'])
def HasCxxWflag(conf, flag):
    d = conf.env['CXX_HAS_FLAG']
    d[flag] = conf.CheckCXXFlag(flag, CXXFLAGS=['-Werror'])

def CheckClHVersion(ctx, ver):
    ctx.Message('Checking for OpenCL %s support in CL/cl.h... ' % ver)
    prog = """
#include <CL/cl.h>
int main(int argc, char* argv[]) {
    (void)argc; /* prevent "unused argument argc" warning */
    (void)argv; /* prevent "unused argument argv" warning */
#if CL_VERSION_%s_%s
    return 0;
#else
    return 1;
#endif
}

""" % tuple(ver.split('.'))
    success, outstr = ctx.TryRun(prog,'.c')
    ctx.Result(success)
    return success

def TryLinkClFunction(ctx, fun, code):
    ctx.Message('Checking for OpenCL function %s... ' % fun)
    prog = """
#include <CL/cl.h>
int main(int argc, char* argv[]) {
    (void)argc; /* prevent "unused argument argc" warning */
    (void)argv; /* prevent "unused argument argv" warning */
    %s
    return 0;
}
""" % code
    success = ctx.TryLink(prog, '.c')
    ctx.Result(success)
    return success;

conf.AddTests(CcChecks.Tests())
conf.AddTests({ 'CheckClHVersion' : CheckClHVersion })
conf.AddTests({ 'TryLinkClFunction' : TryLinkClFunction })

conf.env['CC_HAS_FLAG'] = {}
conf.env['CXX_HAS_FLAG'] = {}

if sys.maxsize > 2**32:
    conf.Define( 'CLXX_ARCH_64BIT' )

cc = CanonCC(conf.env)
if cc == 'clang':
    HasCcWflag(conf, '-Wdeprecated-register')
    HasCcWflag(conf, '-Wdeprecated-declarations')
    HasCcWflag(conf, '-Wunused-parameter')
elif cc == 'gcc':
    HasCcWflag(conf, '-Wmaybe-uninitialized')

cxx = CanonCXX(conf.env)
if cxx == 'clang++':
    HasCxxWflag(conf, '-Wdeprecated-register')
    HasCxxWflag(conf, '-Wdeprecated-declarations')
    HasCxxWflag(conf, '-Wunused-parameter')
elif cxx == 'g++':
    HasCxxWflag(conf, '-Wmaybe-uninitialized')

# Prepare modified environment for the OpenCL checks
orgEnv = conf.env
conf.env = orgEnv.Clone()
conf.env.AppendUnique(LIBS = ['OpenCL'])

if conf.CheckClHVersion('1.0'):
    conf.Define( 'HAVE_OPENCL_CL_H_VERSION_1_0', 1, 'CL/cl.h supports OpenCL 1.0')
if conf.CheckClHVersion('1.1'):
    conf.Define( 'HAVE_OPENCL_CL_H_VERSION_1_1', 1, 'CL/cl.h supports OpenCL 1.1')
if conf.CheckClHVersion('1.2'):
    conf.Define( 'HAVE_OPENCL_CL_H_VERSION_1_2', 1, 'CL/cl.h supports OpenCL 1.2')
if conf.CheckClHVersion('2.0'):
    conf.Define( 'HAVE_OPENCL_CL_H_VERSION_2_0', 1, 'CL/cl.h supports OpenCL 2.0')

#
# Checking for the existence of certain OpenCL functions.
#
if conf.TryLinkClFunction('clCreateSubDevices()',
"""clCreateSubDevices(
        (cl_device_id)NULL,
        (const cl_device_partition_property*)NULL,
        0u,
        (cl_device_id*)NULL,
        (cl_uint*)NULL);
"""):
    conf.Define('HAVE_OPENCL_clCreateSubDevices', 1, 'OpenCL has the clCreateSubDevices()')

if conf.TryLinkClFunction('clRetainDevice()',
"""clRetainDevice((cl_device_id)NULL);
"""):
    conf.Define('HAVE_OPENCL_clRetainDevice', 1, 'OpenCL has the clRetainDevice()')

if conf.TryLinkClFunction('clReleaseDevice()',
"""clReleaseDevice((cl_device_id)NULL);
"""):
    conf.Define('HAVE_OPENCL_clReleaseDevice', 1, 'OpenCL has the clReleaseDevice()')

if conf.TryLinkClFunction('clCreateProgramWithBuiltInKernels()',
"""clCreateProgramWithBuiltInKernels(
        (cl_context)NULL,
        0,
        (const cl_device_id*)NULL,
        (const char*)NULL,
        (cl_int*)NULL);
"""):
    conf.Define('HAVE_OPENCL_clCreateProgramWithBuiltInKernels', 1,
                'OpenCL has the clCreateProgramWithBuiltInKernels()')

if conf.TryLinkClFunction('clCompileProgram()',
"""clCompileProgram(
        (cl_program)NULL,
        0,
        (const cl_device_id*)NULL,
        (const char*)NULL,
        0,
        (const cl_program*)NULL,
        (const char**)NULL,
        (void(CL_CALLBACK*)(cl_program,void*))NULL,
        NULL);
"""):
    conf.Define('HAVE_OPENCL_clCompileProgram', 1,
                'OpenCL has the clCompileProgram()')

if conf.TryLinkClFunction('clLinkProgram()',
"""clLinkProgram(
        (cl_context)NULL,
        0,
        (const cl_device_id*)NULL,
        (const char*)NULL,
        0,
        (const cl_program*)NULL,
        (void(CL_CALLBACK*)(cl_program,void*))NULL,
        NULL,
        NULL);
"""):
    conf.Define('HAVE_OPENCL_clLinkProgram', 1,
                'OpenCL has the clLinkProgram()')

if conf.TryLinkClFunction('clUnloadPlatformCompiler()',
"""clUnloadPlatformCompiler((cl_platform_id)NULL);
"""):
    conf.Define('HAVE_OPENCL_clUnloadPlatformCompiler', 1, 'OpenCL has the clUnloadPlatformCompiler()')

if conf.TryLinkClFunction('clCreateCommandQueue()',
"""clCreateCommandQueue((cl_context)0, (cl_device_id)0, (cl_command_queue_properties)0, (cl_int*)NULL);
"""):
    conf.Define('HAVE_OPENCL_clCreateCommandQueue', 1, 'OpenCL has the clCreateCommandQueue()')

if conf.TryLinkClFunction('clCreateCommandQueueWithProperties()',
"""clCreateCommandQueueWithProperties((cl_context)0, (cl_device_id)0, (cl_queue_properties const*)NULL, (cl_int*)NULL);
"""):
    conf.Define('HAVE_OPENCL_clCreateCommandQueueWithProperties', 1, 'OpenCL has the clCreateCommandQueueWithProperties()')

# Restore the original environment
conf.env = orgEnv

# --without-cl-egl
try:
    if conf.env['GVARS']['WITHOUT_CL_EGL']:
        conf.Define('CLXX_WITHOUT_CL_EGL', 1, 'Do not inclue CL/cl_egl.h')
except KeyError:
    pass

## # FIXME: for MAC-OS the header is OpenCL/cl.h
## conf.req_headers.append(('CL/cl.h','<>','C'))
## conf.req_libs.append({ 'library' : ['OpenCL'],
##                        'autoadd' : 0,
##                        'header'  : '#include <CL/cl.h>' })

# Local Variables:
# # tab-width:4
# # indent-tabs-mode:nil
# # End:
# vim: set syntax=scons expandtab tabstop=4 shiftwidth=4:
